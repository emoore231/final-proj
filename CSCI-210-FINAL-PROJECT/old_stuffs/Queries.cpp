#include "Queries.h"

#pragma region CREATE

const std::string Queries::CREATE_PRODUCT =
R"(
CREATE TABLE IF NOT EXISTS PRODUCT (
    ID INT8 PRIMARY KEY,
    ACQUISITION_CONTRACT_ID INT8 NOT NULL,
    SALES_CONTRACT_ID INT8 NOT NULL,
    TRANSFER_ID INT8 NOT NULL,
    WAREHOUSE_ID INT8 NOT NULL,
    PRODUCT_TYPE_ID INT8 NOT NULL,
    SERIAL_NUMBER TEXT NOT NULL
);
)";

const std::string Queries::CREATE_PRODUCT_TYPE =
R"(
CREATE TABLE IF NOT EXISTS PRODUCT_TYPE (
    ID INT8 PRIMARY KEY,
    MANUFACTURER_ID INT8 NOT NULL,
    NAME TEXT NOT NULL,
    DESCRIPTION TEXT NOT NULL,
    DEMAND_INDEX INT8 NOT NULL,
    PRODUCT_CATEGORY_ID INT8 NOT NULL
);
)";

const std::string Queries::CREATE_PRODUCT_CATEGORY =
R"(
CREATE TABLE IF NOT EXISTS PRODUCT_CATEGORY (
    ID INT8 PRIMARY KEY,
    NAME TEXT NOT NULL,
    DESCRIPTION TEXT NOT NULL
);
)";

const std::string Queries::CREATE_REGULATION =
R"(
CREATE TABLE IF NOT EXISTS REGULATION (
    ID INT8 PRIMARY KEY,
    JURISDICTION_ID INT8 NOT NULL,
    LEGAL_CODE TEXT NOT NULL,
    AUTHORING_BODY TEXT NOT NULL
);
)";

const std::string Queries::CREATE_SALES_CONTRACT =
R"(
CREATE TABLE IF NOT EXISTS SALES_CONTRACT (
    ID INT8 PRIMARY KEY,
    PURCHASER_ID INT8 NOT NULL,
    JURISDICTION_ID INT8 NOT NULL,
    NEGOTIATOR_ID INT8 NOT NULL,
    MANAGER_ID INT8 NOT NULL,
    GRAND_TOTAL REAL NOT NULL,
    DATE TEXT NOT NULL
);
)";

const std::string Queries::CREATE_ACQUISITION_CONTRACT =
R"(
CREATE TABLE IF NOT EXISTS ACQUISITION_CONTRACT (
    ID INT8 PRIMARY KEY,
    SELLER_ID INT8 NOT NULL,
    JURISDICTION_ID INT8 NOT NULL,
    NEGOTIATOR_ID INT8 NOT NULL,
    MANAGER_ID INT8 NOT NULL,
    GRAND_TOTAL REAL NOT NULL,
    DATE TEXT NOT NULL
);
)";

const std::string Queries::CREATE_TRANSFER =
R"(
CREATE TABLE IF NOT EXISTS TRANSFER (
    ID INT8 PRIMARY KEY,
    ORIGIN_ID INT8 NOT NULL,
    DESTINATION_ID INT8 NOT NULL,
    DATE TEXT NOT NULL,
    MANAGER_ID INT8 NOT NULL
);
)";

const std::string Queries::CREATE_PRODUCT_CAPACITY =
R"(
CREATE TABLE IF NOT EXISTS PRODUCT_CAPACITY (
    ID INT8 PRIMARY KEY,
    PRODUCT_TYPE_ID INT8 NOT NULL,
    WAREHOUSE_ID INT8 NOT NULL,
    MAX_CAPACITY INT8 NOT NULL,
    RESTRICTIONS TEXT NOT NULL
);
)";

const std::string Queries::CREATE_PRODUCT_REGULATION =
R"(
CREATE TABLE IF NOT EXISTS PRODUCT_REGULATION (
    ID INT8 PRIMARY KEY,
    PRODUCT_CATEGORY_ID INT8 NOT NULL,
    REGULATION_ID INT8 NOT NULL
);
)";

const std::string Queries::CREATE_PURCHASER =
R"(
CREATE TABLE IF NOT EXISTS PURCHASER (
    ID INT8 PRIMARY KEY,
    KIND TEXT NOT NULL,
    NAME TEXT NOT NULL,
    JURISDICTION_ID INT8 NOT NULL,
    TELEPHONE TEXT NOT NULL,
    NRA_NUMBER TEXT NOT NULL,
    DLN_NUMBER TEXT NOT NULL,
    ATF_NUMBER TEXT NOT NULL
);
)";

const std::string Queries::CREATE_SELLER =
R"(
CREATE TABLE IF NOT EXISTS SELLER (
    ID INT8 PRIMARY KEY,
    JURISDICTION_ID INT8 NOT NULL,
    NAME TEXT NOT NULL,
    RELIABILITY INT8 NOT NULL
);
)";

const std::string Queries::CREATE_WAREHOUSE =
R"(
CREATE TABLE IF NOT EXISTS WAREHOUSE (
    ID INT8 PRIMARY KEY,
    OFFICE_ID INT8 NOT NULL,
    SIZE_TYPE TEXT NOT NULL
);
)";

const std::string Queries::CREATE_MANUFACTURER =
R"(
CREATE TABLE IF NOT EXISTS MANUFACTURER (
    ID INT8 PRIMARY KEY,
    NAME TEXT NOT NULL,
    RELIABILITY_INDEX INT8 NOT NULL,
    NEGOTIATOR_ID INT8 NOT NULL
);
)";

const std::string Queries::CREATE_LOCATION =
R"(
CREATE TABLE IF NOT EXISTS LOCATION (
    ID INT8 PRIMARY KEY,
    ADDRESS_LINE_1 TEXT NOT NULL,
    ADDRESS_LINE_2 TEXT NOT NULL,
    STATE TEXT NOT NULL,
    CITY TEXT NOT NULL,
    ZIP_CODE TEXT NOT NULL
);
)";

const std::string Queries::CREATE_OFFICE =
R"(
CREATE TABLE IF NOT EXISTS OFFICE (
    ID INT8 PRIMARY KEY,
    LOCATION_ID INT8 NOT NULL,
    JURISDICTION_ID INT8 NOT NULL
);
)";

const std::string Queries::CREATE_JURISDICTION =
R"(
CREATE TABLE IF NOT EXISTS JURISDICTION (
    ID INT8 PRIMARY KEY,
    STATE TEXT NOT NULL,
    COUNTY TEXT NOT NULL,
    CITY TEXT NOT NULL
);
)";

const std::string Queries::CREATE_NEGOTIATOR =
R"(
CREATE TABLE IF NOT EXISTS NEGOTIATOR (
    ID INT8 PRIMARY KEY,
    EMPLOYEE_ID INT8 NOT NULL,
    FAVORABILITY INT8 NOT NULL,
    NOTES TEXT NOT NULL
);
)";

const std::string Queries::CREATE_MANAGER =
R"(
CREATE TABLE IF NOT EXISTS MANAGER (
    ID INT8 PRIMARY KEY,
    EMPLOYEE_ID INT8 NOT NULL,
    AUTHORITY_LEVEL INT8 NOT NULL,
    NOTES TEXT NOT NULL
);
)";

const std::string Queries::CREATE_EMPLOYEE =
R"(
CREATE TABLE IF NOT EXISTS EMPLOYEE (
    ID INT8 PRIMARY KEY,
    NAME TEXT NOT NULL,
    SSN TEXT NOT NULL,
    DOB TEXT NOT NULL,
    OFFICE_ID INT8 NOT NULL,
    SALARY REAL NOT NULL,
    SCHEDULE_ID INT8 NOT NULL,
    JOB_POSITION_ID INT8 NOT NULL,
    LOCATION_ID INT8 NOT NULL,
    JURISDICTION_ID INT8 NOT NULL,
    MANAGER_ID INT8 NOT NULL
);
)";

const std::string Queries::CREATE_SCHEDULE =
R"(
CREATE TABLE IF NOT EXISTS SCHEDULE (
    ID INT8 PRIMARY KEY,
    M_START_HOUR TEXT NOT NULL,
    M_END_HOUR TEXT NOT NULL,
    T_START_HOUR TEXT NOT NULL,
    T_END_HOUR TEXT NOT NULL,
    W_START_HOUR TEXT NOT NULL,
    W_END_HOUR TEXT NOT NULL,
    TH_START_HOUR TEXT NOT NULL,
    TH_END_HOUR TEXT NOT NULL,
    F_START_HOUR TEXT NOT NULL,
    F_END_HOUR TEXT NOT NULL,
    S_START_HOUR TEXT NOT NULL,
    S_END_HOUR TEXT NOT NULL
);
)";

const std::string Queries::CREATE_EMPLOYEE_CHANGE =
R"(
CREATE TABLE IF NOT EXISTS EMPLOYEE_CHANGE (
    ID INT8 PRIMARY KEY,
    EMPLOYEE_ID INT8 NOT NULL,
    MANAGER_ID INT8 NOT NULL,
    DATE TEXT NOT NULL,
    KIND TEXT NOT NULL
);
)";

const std::string Queries::CREATE_JOB_POSITION =
R"(
CREATE TABLE IF NOT EXISTS JOB_POSITION (
    ID INT8 PRIMARY KEY,
    NAME TEXT NOT NULL,
    DESCRIPTION TEXT NOT NULL
);
)";

#pragma endregion CREATE

#pragma region INDEX
const std::string Queries::INDEX_PRODUCT =
R"(
CREATE INDEX IF NOT EXISTS IDX_PRODUCT_ACQUISITION_CONTRACT_ID ON PRODUCT (ACQUISITION_CONTRACT_ID);
CREATE INDEX IF NOT EXISTS IDX_PRODUCT_SALES_CONTRACT_ID ON PRODUCT (SALES_CONTRACT_ID);
CREATE INDEX IF NOT EXISTS IDX_PRODUCT_TRANSFER_ID ON PRODUCT (TRANSFER_ID);
CREATE INDEX IF NOT EXISTS IDX_PRODUCT_WAREHOUSE_ID ON PRODUCT (WAREHOUSE_ID);
CREATE INDEX IF NOT EXISTS IDX_PRODUCT_PRODUCT_TYPE_ID ON PRODUCT (PRODUCT_TYPE_ID);
CREATE INDEX IF NOT EXISTS IDX_PRODUCT_SERIAL_NUMBER ON PRODUCT (SERIAL_NUMBER);
)";

const std::string Queries::INDEX_PRODUCT_TYPE =
R"(
CREATE INDEX IF NOT EXISTS IDX_PRODUCT_TYPE_MANUFACTURER_ID ON PRODUCT_TYPE (MANUFACTURER_ID);
CREATE INDEX IF NOT EXISTS IDX_PRODUCT_TYPE_NAME ON PRODUCT_TYPE (NAME);
CREATE INDEX IF NOT EXISTS IDX_PRODUCT_TYPE_DESCRIPTION ON PRODUCT_TYPE (DESCRIPTION);
CREATE INDEX IF NOT EXISTS IDX_PRODUCT_TYPE_DEMAND_INDEX ON PRODUCT_TYPE (DEMAND_INDEX);
CREATE INDEX IF NOT EXISTS IDX_PRODUCT_TYPE_PRODUCT_CATEGORY_ID ON PRODUCT_TYPE (PRODUCT_CATEGORY_ID);
)";

const std::string Queries::INDEX_PRODUCT_CATEGORY =
R"(
CREATE INDEX IF NOT EXISTS IDX_PRODUCT_CATEGORY_NAME ON PRODUCT_CATEGORY (NAME);
CREATE INDEX IF NOT EXISTS IDX_PRODUCT_CATEGORY_DESCRIPTION ON PRODUCT_CATEGORY (DESCRIPTION);
)";

const std::string Queries::INDEX_REGULATION =
R"(
CREATE INDEX IF NOT EXISTS IDX_REGULATION_JURISDICTION_ID ON REGULATION (JURISDICTION_ID);
CREATE INDEX IF NOT EXISTS IDX_REGULATION_LEGAL_CODE ON REGULATION (LEGAL_CODE);
CREATE INDEX IF NOT EXISTS IDX_REGULATION_AUTHORING_BODY ON REGULATION (AUTHORING_BODY);
)";

const std::string Queries::INDEX_SALES_CONTRACT =
R"(
CREATE INDEX IF NOT EXISTS IDX_SALES_CONTRACT_PURCHASER_ID ON SALES_CONTRACT (PURCHASER_ID);
CREATE INDEX IF NOT EXISTS IDX_SALES_CONTRACT_JURISDICTION_ID ON SALES_CONTRACT (JURISDICTION_ID);
CREATE INDEX IF NOT EXISTS IDX_SALES_CONTRACT_NEGOTIATOR_ID ON SALES_CONTRACT (NEGOTIATOR_ID);
CREATE INDEX IF NOT EXISTS IDX_SALES_CONTRACT_MANAGER_ID ON SALES_CONTRACT (MANAGER_ID);
CREATE INDEX IF NOT EXISTS IDX_SALES_CONTRACT_GRAND_TOTAL ON SALES_CONTRACT (GRAND_TOTAL);
CREATE INDEX IF NOT EXISTS IDX_SALES_CONTRACT_DATE ON SALES_CONTRACT (DATE);
)";

const std::string Queries::INDEX_ACQUISITION_CONTRACT =
R"(
CREATE INDEX IF NOT EXISTS IDX_ACQUISITION_CONTRACT_SELLER_ID ON ACQUISITION_CONTRACT (SELLER_ID);
CREATE INDEX IF NOT EXISTS IDX_ACQUISITION_CONTRACT_JURISDICTION_ID ON ACQUISITION_CONTRACT (JURISDICTION_ID);
CREATE INDEX IF NOT EXISTS IDX_ACQUISITION_CONTRACT_NEGOTIATOR_ID ON ACQUISITION_CONTRACT (NEGOTIATOR_ID);
CREATE INDEX IF NOT EXISTS IDX_ACQUISITION_CONTRACT_MANAGER_ID ON ACQUISITION_CONTRACT (MANAGER_ID);
CREATE INDEX IF NOT EXISTS IDX_ACQUISITION_CONTRACT_GRAND_TOTAL ON ACQUISITION_CONTRACT (GRAND_TOTAL);
CREATE INDEX IF NOT EXISTS IDX_ACQUISITION_CONTRACT_DATE ON ACQUISITION_CONTRACT (DATE);
)";

const std::string Queries::INDEX_TRANSFER =
R"(
CREATE INDEX IF NOT EXISTS IDX_TRANSFER_ORIGIN_ID ON TRANSFER (ORIGIN_ID);
CREATE INDEX IF NOT EXISTS IDX_TRANSFER_DESTINATION_ID ON TRANSFER (DESTINATION_ID);
CREATE INDEX IF NOT EXISTS IDX_TRANSFER_DATE ON TRANSFER (DATE);
CREATE INDEX IF NOT EXISTS IDX_TRANSFER_MANAGER_ID ON TRANSFER (MANAGER_ID);
)";

const std::string Queries::INDEX_PRODUCT_CAPACITY =
R"(
CREATE INDEX IF NOT EXISTS IDX_PRODUCT_CAPACITY_PRODUCT_TYPE_ID ON PRODUCT_CAPACITY (PRODUCT_TYPE_ID);
CREATE INDEX IF NOT EXISTS IDX_PRODUCT_CAPACITY_WAREHOUSE_ID ON PRODUCT_CAPACITY (WAREHOUSE_ID);
CREATE INDEX IF NOT EXISTS IDX_PRODUCT_CAPACITY_MAX_CAPACITY ON PRODUCT_CAPACITY (MAX_CAPACITY);
CREATE INDEX IF NOT EXISTS IDX_PRODUCT_CAPACITY_RESTRICTIONS ON PRODUCT_CAPACITY (RESTRICTIONS);
)";

const std::string Queries::INDEX_PRODUCT_REGULATION =
R"(
CREATE INDEX IF NOT EXISTS IDX_PRODUCT_REGULATION_PRODUCT_CATEGORY_ID ON PRODUCT_REGULATION (PRODUCT_CATEGORY_ID);
CREATE INDEX IF NOT EXISTS IDX_PRODUCT_REGULATION_REGULATION_ID ON PRODUCT_REGULATION (REGULATION_ID);
)";

const std::string Queries::INDEX_PURCHASER =
R"(
CREATE INDEX IF NOT EXISTS IDX_PURCHASER_KIND ON PURCHASER (KIND);
CREATE INDEX IF NOT EXISTS IDX_PURCHASER_NAME ON PURCHASER (NAME);
CREATE INDEX IF NOT EXISTS IDX_PURCHASER_JURISDICTION_ID ON PURCHASER (JURISDICTION_ID);
CREATE INDEX IF NOT EXISTS IDX_PURCHASER_TELEPHONE ON PURCHASER (TELEPHONE);
CREATE INDEX IF NOT EXISTS IDX_PURCHASER_NRA_NUMBER ON PURCHASER (NRA_NUMBER);
CREATE INDEX IF NOT EXISTS IDX_PURCHASER_DLN_NUMBER ON PURCHASER (DLN_NUMBER);
CREATE INDEX IF NOT EXISTS IDX_PURCHASER_ATF_NUMBER ON PURCHASER (ATF_NUMBER);
)";

const std::string Queries::INDEX_SELLER =
R"(
CREATE INDEX IF NOT EXISTS IDX_SELLER_JURISDICTION_ID ON SELLER (JURISDICTION_ID);
CREATE INDEX IF NOT EXISTS IDX_SELLER_NAME ON SELLER (NAME);
CREATE INDEX IF NOT EXISTS IDX_SELLER_RELIABILITY ON SELLER (RELIABILITY);
)";

const std::string Queries::INDEX_WAREHOUSE =
R"(
CREATE INDEX IF NOT EXISTS IDX_WAREHOUSE_OFFICE_ID ON WAREHOUSE (OFFICE_ID);
CREATE INDEX IF NOT EXISTS IDX_WAREHOUSE_SIZE_TYPE ON WAREHOUSE (SIZE_TYPE);
)";

const std::string Queries::INDEX_MANUFACTURER =
R"(
CREATE INDEX IF NOT EXISTS IDX_MANUFACTURER_NAME ON MANUFACTURER (NAME);
CREATE INDEX IF NOT EXISTS IDX_MANUFACTURER_RELIABILITY_INDEX ON MANUFACTURER (RELIABILITY_INDEX);
CREATE INDEX IF NOT EXISTS IDX_MANUFACTURER_NEGOTIATOR_ID ON MANUFACTURER (NEGOTIATOR_ID);
)";

const std::string Queries::INDEX_LOCATION =
R"(
CREATE INDEX IF NOT EXISTS IDX_LOCATION_ADDRESS_LINE_1 ON LOCATION (ADDRESS_LINE_1);
CREATE INDEX IF NOT EXISTS IDX_LOCATION_ADDRESS_LINE_2 ON LOCATION (ADDRESS_LINE_2);
CREATE INDEX IF NOT EXISTS IDX_LOCATION_STATE ON LOCATION (STATE);
CREATE INDEX IF NOT EXISTS IDX_LOCATION_CITY ON LOCATION (CITY);
CREATE INDEX IF NOT EXISTS IDX_LOCATION_ZIP_CODE ON LOCATION (ZIP_CODE);
)";

const std::string Queries::INDEX_OFFICE =
R"(
CREATE INDEX IF NOT EXISTS IDX_OFFICE_LOCATION_ID ON OFFICE (LOCATION_ID);
CREATE INDEX IF NOT EXISTS IDX_OFFICE_JURISDICTION_ID ON OFFICE (JURISDICTION_ID);
)";

const std::string Queries::INDEX_JURISDICTION =
R"(
CREATE INDEX IF NOT EXISTS IDX_JURISDICTION_STATE ON JURISDICTION (STATE);
CREATE INDEX IF NOT EXISTS IDX_JURISDICTION_COUNTY ON JURISDICTION (COUNTY);
CREATE INDEX IF NOT EXISTS IDX_JURISDICTION_CITY ON JURISDICTION (CITY);
)";

const std::string Queries::INDEX_NEGOTIATOR =
R"(
CREATE INDEX IF NOT EXISTS IDX_NEGOTIATOR_EMPLOYEE_ID ON NEGOTIATOR (EMPLOYEE_ID);
CREATE INDEX IF NOT EXISTS IDX_NEGOTIATOR_FAVORABILITY ON NEGOTIATOR (FAVORABILITY);
CREATE INDEX IF NOT EXISTS IDX_NEGOTIATOR_NOTES ON NEGOTIATOR (NOTES);
)";

const std::string Queries::INDEX_MANAGER =
R"(
CREATE INDEX IF NOT EXISTS IDX_MANAGER_EMPLOYEE_ID ON MANAGER (EMPLOYEE_ID);
CREATE INDEX IF NOT EXISTS IDX_MANAGER_AUTHORITY_LEVEL ON MANAGER (AUTHORITY_LEVEL);
CREATE INDEX IF NOT EXISTS IDX_MANAGER_NOTES ON MANAGER (NOTES);
)";

const std::string Queries::INDEX_EMPLOYEE =
R"(
CREATE INDEX IF NOT EXISTS IDX_EMPLOYEE_NAME ON EMPLOYEE (NAME);
CREATE INDEX IF NOT EXISTS IDX_EMPLOYEE_SSN ON EMPLOYEE (SSN);
CREATE INDEX IF NOT EXISTS IDX_EMPLOYEE_DOB ON EMPLOYEE (DOB);
CREATE INDEX IF NOT EXISTS IDX_EMPLOYEE_OFFICE_ID ON EMPLOYEE (OFFICE_ID);
CREATE INDEX IF NOT EXISTS IDX_EMPLOYEE_SALARY ON EMPLOYEE (SALARY);
CREATE INDEX IF NOT EXISTS IDX_EMPLOYEE_SCHEDULE_ID ON EMPLOYEE (SCHEDULE_ID);
CREATE INDEX IF NOT EXISTS IDX_EMPLOYEE_JOB_POSITION_ID ON EMPLOYEE (JOB_POSITION_ID);
CREATE INDEX IF NOT EXISTS IDX_EMPLOYEE_LOCATION_ID ON EMPLOYEE (LOCATION_ID);
CREATE INDEX IF NOT EXISTS IDX_EMPLOYEE_JURISDICTION_ID ON EMPLOYEE (JURISDICTION_ID);
CREATE INDEX IF NOT EXISTS IDX_EMPLOYEE_MANAGER_ID ON EMPLOYEE (MANAGER_ID);
)";

const std::string Queries::INDEX_SCHEDULE =
R"(
CREATE INDEX IF NOT EXISTS IDX_SCHEDULE_M_START_HOUR ON SCHEDULE (M_START_HOUR);
CREATE INDEX IF NOT EXISTS IDX_SCHEDULE_M_END_HOUR ON SCHEDULE (M_END_HOUR);
CREATE INDEX IF NOT EXISTS IDX_SCHEDULE_T_START_HOUR ON SCHEDULE (T_START_HOUR);
CREATE INDEX IF NOT EXISTS IDX_SCHEDULE_T_END_HOUR ON SCHEDULE (T_END_HOUR);
CREATE INDEX IF NOT EXISTS IDX_SCHEDULE_W_START_HOUR ON SCHEDULE (W_START_HOUR);
CREATE INDEX IF NOT EXISTS IDX_SCHEDULE_W_END_HOUR ON SCHEDULE (W_END_HOUR);
CREATE INDEX IF NOT EXISTS IDX_SCHEDULE_TH_START_HOUR ON SCHEDULE (TH_START_HOUR);
CREATE INDEX IF NOT EXISTS IDX_SCHEDULE_TH_END_HOUR ON SCHEDULE (TH_END_HOUR);
CREATE INDEX IF NOT EXISTS IDX_SCHEDULE_F_START_HOUR ON SCHEDULE (F_START_HOUR);
CREATE INDEX IF NOT EXISTS IDX_SCHEDULE_F_END_HOUR ON SCHEDULE (F_END_HOUR);
CREATE INDEX IF NOT EXISTS IDX_SCHEDULE_S_START_HOUR ON SCHEDULE (S_START_HOUR);
CREATE INDEX IF NOT EXISTS IDX_SCHEDULE_S_END_HOUR ON SCHEDULE (S_END_HOUR);
)";

const std::string Queries::INDEX_EMPLOYEE_CHANGE =
R"(
CREATE INDEX IF NOT EXISTS IDX_EMPLOYEE_CHANGE_EMPLOYEE_ID ON EMPLOYEE_CHANGE (EMPLOYEE_ID);
CREATE INDEX IF NOT EXISTS IDX_EMPLOYEE_CHANGE_MANAGER_ID ON EMPLOYEE_CHANGE (MANAGER_ID);
CREATE INDEX IF NOT EXISTS IDX_EMPLOYEE_CHANGE_DATE ON EMPLOYEE_CHANGE (DATE);
CREATE INDEX IF NOT EXISTS IDX_EMPLOYEE_CHANGE_KIND ON EMPLOYEE_CHANGE (KIND);
)";

const std::string Queries::INDEX_JOB_POSITION =
R"(
CREATE INDEX IF NOT EXISTS IDX_JOB_POSITION_NAME ON JOB_POSITION (NAME);
CREATE INDEX IF NOT EXISTS IDX_JOB_POSITION_DESCRIPTION ON JOB_POSITION (DESCRIPTION);
)";

#pragma endregion INDEX